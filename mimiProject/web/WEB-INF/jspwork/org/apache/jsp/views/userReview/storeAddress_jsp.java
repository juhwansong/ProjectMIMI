/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.32
 * Generated at: 2018-08-22 11:48:07 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.views.userReview;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class storeAddress_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/views/userReview/../../nonHeaderHead.jsp", Long.valueOf(1534842978477L));
    _jspx_dependants.put("/views/userReview/../../end.jsp", Long.valueOf(1534938461534L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write('\r');
      out.write('\n');
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\r\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no\" />\r\n");
      out.write("<meta name=\"format-detection\" content=\"telephone=no\" />\r\n");
      out.write("<meta name=\"apple-mobile-web-app-capable\" content=\"yes\" />\r\n");
      out.write("<meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black\" />\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<link rel=\"stylesheet\" href=\"https://use.fontawesome.com/releases/v5.2.0/css/all.css\" integrity=\"sha384-hWVjflwFxL6sNzntih27bfxkr27PmbbK/iSvJ+a4+0owXq79v+lsFkW54bOGbiDQ\" crossorigin=\"anonymous\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"/mimi/resources/css/bootstrap.css\">\r\n");
      out.write("<script type=\"text/javascript\" src=\"/mimi/resources/js/jquery-3.3.1.min.js\"></script>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"/mimi/resources/css/admin-review-thema.css\">\r\n");
      out.write("<link rel=\"stylesheet\" type = \"text/css\" href = \"/mimi/resources/css/mapPage.css\">\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");

	String userId = (String)session.getAttribute("userId");
	String authority = (String)session.getAttribute("authority");
	String nickName = (String)session.getAttribute("nickName");

      out.write('	');
      out.write('\r');
      out.write('\n');
      out.write(" \r\n");
      out.write("<!-- head.jsp에 header.jsp가 들어가 있기때문에 header.jsp가 미포함된 head.jsp추가  -->\r\n");
      out.write("\r\n");
      out.write("<!-- 다음맵 인증키 (직접 발급받아야됨) -->\r\n");
      out.write("<script type = \"text/javascript\" src = \"//dapi.kakao.com/v2/maps/sdk.js?appkey=795b33c97453a44f73949c94f447f347&libraries=services,clusterer,drawing\"></script>\r\n");
      out.write("\r\n");
      out.write("<!-- 커스텀 오버레이 꾸미기 -->\r\n");
      out.write("<style>  \r\n");
      out.write("\t.wrap {position: absolute;left:0;bottom: 40px;width: 0px;height: 0px;margin-left: -144px;text-align: left;font-size: 12px;font-family: 'Malgun Gothic', dotum, '돋움', sans-serif;line-height: 1.5;}\r\n");
      out.write("    .wrap * {padding: 0;margin: 0;}\r\n");
      out.write("    .wrap .infowin {position:relative;top:-62px;left:40px;width: 206px;height: 40px;border-radius: 5px;border-bottom: 2px solid #ccc;border-right: 1px solid #ccc;background: #2b2d36; overflow: hidden; opacity:0.9}\r\n");
      out.write("    .wrap .infowin:nth-child(1) {border: 0;box-shadow: 0px 1px 2px #888;}\r\n");
      out.write("    .infowin .title {padding: 5px 0 0 10px;height: 30px;background: #eee;border-bottom: 1px solid #ddd;font-size: 18px;font-weight: bold;}\r\n");
      out.write("    .infowin .close {position: absolute;top: 10px;right: 10px;color: #888;width: 17px;height: 17px;background: url('http://t1.daumcdn.net/localimg/localimages/07/mapapidoc/overlay_close.png');}\r\n");
      out.write("    .infowin .close:hover {cursor: pointer;}\r\n");
      out.write("    .infowin .body {position: relative;overflow: hidden;}\r\n");
      out.write("    .infowin .desc {position: relative;left:-48px;text-align:center;margin: 13px 0 0 90px;height: 75px;background: #2b2d36;}\r\n");
      out.write("    .desc .ellipsis {overflow: hidden;text-overflow: ellipsis;white-space: nowrap;}\r\n");
      out.write("    .desc .jibun {font-size: 11px;color: #888;margin-top: -2px;}\r\n");
      out.write("    .infowin .img {position: absolute;top: 6px;left: 5px;width: 73px;height: 71px;border: 1px solid #ddd;color: #888;overflow: hidden;}\r\n");
      out.write("    /* .wrap:after {content: '';position: absolute;margin-left: -12px;left: 50%;bottom:10px;width: 22px;height: 12px;background: url('http://t1.daumcdn.net/localimg/localimages/07/mapapidoc/vertex_black.png')} */ \r\n");
      out.write("    .wrap:after \r\n");
      out.write("\t{\r\n");
      out.write("\tcontent: '';\r\n");
      out.write("\tposition: absolute;\r\n");
      out.write("\tborder-style: solid;\t\r\n");
      out.write("\tmargin-left: -12px;\r\n");
      out.write("\tleft : 50%;\r\n");
      out.write("\tborder-width: 15px 13px 0;\r\n");
      out.write("\tborder-color: #2b2d36 transparent;\r\n");
      out.write("\topacity:0.9;\r\n");
      out.write("\tdisplay: block;\r\n");
      out.write("\twidth: 22px;\r\n");
      out.write("\theight: 12px;\r\n");
      out.write("\tz-index: 1;\r\n");
      out.write("\tbottom: 7px;\r\n");
      out.write("\tleft: 143px;\r\n");
      out.write("\t}\r\n");
      out.write("    .infowin .link {color: #5085BB;} \r\n");
      out.write("</style>\r\n");
      out.write("\r\n");
      out.write("<title>상세 주소</title>\r\n");
      out.write("\r\n");
      out.write("<div class=\"container\">\r\n");
      out.write("<h3>상세 주소</h3>\r\n");
      out.write("<hr style=\"width:1000px;\">\r\n");
      out.write("\t<!-- 지도 부분 시작 -->\r\n");
      out.write("\t<div class=\"map_wrap\">\r\n");
      out.write("\t    \t<div id=\"map\" style=\"width:100%;height:100%;position:relative;overflow:hidden;\"></div>\r\n");
      out.write("\t    \t<div id=\"menu_wrap\" class=\"bg_white\">\r\n");
      out.write("\t        \t<div class=\"option\">\r\n");
      out.write("\t            \t<div>\r\n");
      out.write("\t                \t<form onsubmit=\"searchPlaces(); return false;\">\r\n");
      out.write("\t                         키워드 : \t<input type=\"text\" id=\"keyword\" size=\"15\"> \r\n");
      out.write("\t                    <button id = \"search\" type=\"submit\">검색하기</button> \r\n");
      out.write("\t               \t\t</form>\r\n");
      out.write("\t            \t</div>\r\n");
      out.write("\t        \t</div>\r\n");
      out.write("\t        \t<hr>\r\n");
      out.write("\t        \t<ul id=\"placesList\"></ul>\r\n");
      out.write("\t        \t<div id=\"pagination\"></div>\r\n");
      out.write("\t    \t</div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<div style=\"margin-top:20px;\">\r\n");
      out.write("\t\t\t<button class=\"btn btn-info\" id = \"direct\">위치 직접 표시하기</button>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<!-- 지도 부분 끝 -->\r\n");
      out.write("<hr>\r\n");
      out.write("\t\t<form action=\"getParentText()\">\r\n");
      out.write("\t\t\t<div class=\"row\">\r\n");
      out.write("\t\t\t\t<div class=\"col-xs-6\">\r\n");
      out.write("\t\t\t\t\t<label for=\"store_name\">매장명</label> <input type=\"text\" class=\"form-control\" id=\"store_name\"  placeholder=\"미미 카페\">\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t<div class=\"col-xs-6\">\r\n");
      out.write("\t\t\t\t\t<label for=\"store_phone\">매장 연락처</label> <input type=\"tel\" class=\"form-control\" id=\"store_phone\" placeholder=\"02-123-4567\">\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t<br><br><br><br>\r\n");
      out.write("\t\t\t\t<div class=\"col-xs-12\">\r\n");
      out.write("\t\t\t\t\t<label for=\"store_address\">매장 주소</label> <input type=\"text\" class=\"form-control\" id=\"store_address\" placeholder=\"주소 입력\">\r\n");
      out.write("\t\t\t\t\t<input type=\"hidden\" id=\"latitude\" name=\"latitude\" value=\"\"> <!-- 위도값 저장 -->\r\n");
      out.write("\t\t\t\t\t<input type=\"hidden\" id=\"longitude\" name=\"longitude\" value=\"\"> <!-- 경도값 저장 -->\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t<br>\r\n");
      out.write("\t\t\t<div style=\"text-align:center;\">\r\n");
      out.write("\t\t\t<input type=\"button\" class=\"btn btn-default\" onclick=\"setParentText()\" value=\"확인\">\r\n");
      out.write("\t\t\t<input type=\"button\" class=\"btn btn-default\"\r\n");
      out.write("\t\t\t\tonClick='self.close()'\r\n");
      out.write("\t\t\t\tvalue=\"취소\">\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</form>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t\r\n");
      out.write("<script>\r\n");
      out.write("\r\n");
      out.write("$(function getParentText(){\r\n");
      out.write("\tdocument.getElementById(\"store_name\").value = opener.document.getElementById(\"store_name\").value;\r\n");
      out.write("\tdocument.getElementById(\"store_phone\").value = opener.document.getElementById(\"store_phone\").value;\r\n");
      out.write("\tdocument.getElementById(\"store_address\").value = opener.document.getElementById(\"store_address\").value;\r\n");
      out.write(" });\r\n");
      out.write("//팝업창 확인버튼 누를 시 팝업창에 입력된 데이터 값을 부모 페이지에 넘기는 함수 \r\n");
      out.write("function setParentText(){\r\n");
      out.write("\topener.document.getElementById(\"store_name\").value = document.getElementById(\"store_name\").value;\r\n");
      out.write("\topener.document.getElementById(\"store_phone\").value = document.getElementById(\"store_phone\").value;\r\n");
      out.write("\topener.document.getElementById(\"store_address\").value = document.getElementById(\"store_address\").value;\r\n");
      out.write("\topener.document.getElementById(\"latitude\").value = document.getElementById(\"latitude\").value;\r\n");
      out.write("\topener.document.getElementById(\"longitude\").value = document.getElementById(\"longitude\").value;\r\n");
      out.write("\twindow.opener.mapRefresh();\r\n");
      out.write("\tself.close()\r\n");
      out.write(" }\r\n");
      out.write("//마커를 담을 배열입니다\r\n");
      out.write("var markers = [];\r\n");
      out.write("var geocoder = new daum.maps.services.Geocoder(); //주소-좌표 변환 객체 생성\r\n");
      out.write("var mapContainer = document.getElementById('map'), // 지도를 표시할 div \r\n");
      out.write("    mapOption = {\r\n");
      out.write("        center: new daum.maps.LatLng(37.566826, 126.9786567), // 지도의 중심좌표\r\n");
      out.write("        level: 3 // 지도의 확대 레벨\r\n");
      out.write("    };  \r\n");
      out.write("\r\n");
      out.write("// 지도를 생성합니다    \r\n");
      out.write("var map = new daum.maps.Map(mapContainer, mapOption); \r\n");
      out.write("\r\n");
      out.write("// 장소 검색 객체를 생성합니다\r\n");
      out.write("var ps = new daum.maps.services.Places();  \r\n");
      out.write("\r\n");
      out.write("// 검색 결과 목록이나 마커를 클릭했을 때 장소명을 표출할 인포윈도우를 생성합니다\r\n");
      out.write("/* var infowindow = new daum.maps.InfoWindow({\r\n");
      out.write("\tzIndex:1\r\n");
      out.write("}); */\r\n");
      out.write("\r\n");
      out.write("var count; //지도에 직접 표기하기 버튼 클릭시 값 변화\r\n");
      out.write("var placelistclicked = -1; //초기값 -1\r\n");
      out.write("//인포윈도우에 장소명을 표시합니다\r\n");
      out.write("var infowindow = new Array();\r\n");
      out.write("////////////////////////처음 불러올때 본인 위치를 표시\r\n");
      out.write("// HTML5의 geolocation으로 사용할 수 있는지 확인합니다 \r\n");
      out.write("var locPosition = null;\r\n");
      out.write("if (navigator.geolocation) {\r\n");
      out.write("    \r\n");
      out.write("    // GeoLocation을 이용해서 접속 위치를 얻어옵니다\r\n");
      out.write("    navigator.geolocation.getCurrentPosition(function(position) {\r\n");
      out.write("        \r\n");
      out.write("        var lat = position.coords.latitude, // 위도\r\n");
      out.write("            lon = position.coords.longitude; // 경도\r\n");
      out.write("        \r\n");
      out.write("        locPosition = new daum.maps.LatLng(lat, lon), // 마커가 표시될 위치를 geolocation으로 얻어온 좌표로 생성합니다\r\n");
      out.write("     \t//현재 위치 표시\r\n");
      out.write("    \tmap.setCenter(locPosition);\r\n");
      out.write("\t      \r\n");
      out.write("      });\r\n");
      out.write("    \r\n");
      out.write("} else { // HTML5의 GeoLocation을 사용할 수 없을때\r\n");
      out.write("    \r\n");
      out.write("    locPosition = new daum.maps.LatLng(33.450701, 126.570667),    \r\n");
      out.write("  \t//현재 위치 표시\r\n");
      out.write("\tmap.setCenter(locPosition);//맵 중심좌표 설정\r\n");
      out.write("   \r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("// 키워드 검색을 요청하는 함수입니다\r\n");
      out.write("function searchPlaces() {\r\n");
      out.write("\r\n");
      out.write("    var keyword = document.getElementById('keyword').value;\r\n");
      out.write("\t\r\n");
      out.write("    if (!keyword.replace(/^\\s+|\\s+$/g, '')) {\r\n");
      out.write("        alert('키워드를 입력해주세요!');\r\n");
      out.write("        return false;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    // 장소검색 객체를 통해 키워드로 장소검색을 요청합니다\r\n");
      out.write("    ps.keywordSearch( keyword, placesSearchCB);     \r\n");
      out.write("    \t     \r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function searchAddrFromCoords(coords, callback) { //좌표로 행정동 주소 정보를 요청\r\n");
      out.write("    // 좌표로 행정동 주소 정보를 요청합니다\r\n");
      out.write("    geocoder.coord2RegionCode(coords.getLng(), coords.getLat(), callback);         \r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("//특정 inputbox에 특정 좌표에 대한 주소정보를 표출하는 함수\r\n");
      out.write("function displayCenterInfo(result, status) {\r\n");
      out.write("    if (status === daum.maps.services.Status.OK) {\r\n");
      out.write("        var infoDiv = document.getElementById('store_address');\r\n");
      out.write("\r\n");
      out.write("        for(var i = 0; i < result.length; i++) {\r\n");
      out.write("            // 행정동의 region_type 값은 'H' 이므로\r\n");
      out.write("            if (result[i].region_type === 'H') {\r\n");
      out.write("            \tinfoDiv.value = result[i].address_name;\r\n");
      out.write("           \r\n");
      out.write("                break;\r\n");
      out.write("            }\r\n");
      out.write("        }\r\n");
      out.write("    }    \r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 장소검색이 완료됐을 때 호출되는 콜백함수 입니다\r\n");
      out.write("function placesSearchCB(data, status, pagination) {\r\n");
      out.write("\tcount = count +1; //검색 클릭 시 지도에 직접 마크 표시하기 버튼 초기화\r\n");
      out.write("\tmap.setCursor(\"\"); //버튼 기능 초기화 됐으니  커서모양도 초기화 (직접 지도에 마커 표시 클릭시 변하는 커서모양 초기화)\r\n");
      out.write("\t\r\n");
      out.write("    if (status === daum.maps.services.Status.OK) {\r\n");
      out.write("\r\n");
      out.write("        // 정상적으로 검색이 완료됐으면\r\n");
      out.write("        // 검색 목록과 마커를 표출합니다\r\n");
      out.write("        displayPlaces(data);\r\n");
      out.write("\t\t\r\n");
      out.write("        \r\n");
      out.write("     \t//검색시  자동으로 1번 마커를 표시\r\n");
      out.write("        daum.maps.event.trigger(markers[0], \"click\"); //강제로 클릭 발생\r\n");
      out.write("        displayInfowindow(markers[0], data[0].place_name, 0);   //처음엔 인포창 생성해야 함 (mouseover 이벤트로 발생되는게 아니기 때문에)\r\n");
      out.write("\t\t\r\n");
      out.write("        // 페이지 번호를 표출합니다\r\n");
      out.write("        displayPagination(pagination);\r\n");
      out.write("\r\n");
      out.write("    } else if (status === daum.maps.services.Status.ZERO_RESULT) {\r\n");
      out.write("\r\n");
      out.write("        alert('검색 결과가 존재하지 않습니다.');\r\n");
      out.write("        return;\r\n");
      out.write("\r\n");
      out.write("    } else if (status === daum.maps.services.Status.ERROR) {\r\n");
      out.write("\r\n");
      out.write("        alert('검색 결과 중 오류가 발생했습니다.');\r\n");
      out.write("        return;\r\n");
      out.write("\r\n");
      out.write("    }\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 검색 결과 목록과 마커를 표출하는 함수입니다\r\n");
      out.write("function displayPlaces(places) {\r\n");
      out.write("\r\n");
      out.write("    var listEl = document.getElementById('placesList'), \r\n");
      out.write("    menuEl = document.getElementById('menu_wrap'),\r\n");
      out.write("    fragment = document.createDocumentFragment(), \r\n");
      out.write("    bounds = new daum.maps.LatLngBounds(), \r\n");
      out.write("    listStr = '';\r\n");
      out.write("    \r\n");
      out.write("    // 검색 결과 목록에 추가된 항목들을 제거합니다\r\n");
      out.write("    removeAllChildNods(listEl);\r\n");
      out.write("\r\n");
      out.write("    // 지도에 표시되고 있는 마커를 제거합니다\r\n");
      out.write("    removeMarker();\r\n");
      out.write("    \r\n");
      out.write("    for ( var i=0; i<places.length; i++ ) {\r\n");
      out.write("\r\n");
      out.write("        // 마커를 생성하고 지도에 표시합니다\r\n");
      out.write("        var placePosition = new daum.maps.LatLng(places[i].y, places[i].x),\r\n");
      out.write("            marker = addMarker(placePosition, i), \r\n");
      out.write("            itemEl = getListItem(i, places[i]); // 검색 결과 항목 Element를 생성합니다\r\n");
      out.write("\r\n");
      out.write("        // 검색된 장소 위치를 기준으로 지도 범위를 재설정하기위해\r\n");
      out.write("        // LatLngBounds 객체에 좌표를 추가합니다\r\n");
      out.write("        bounds.extend(placePosition);\r\n");
      out.write("\t\t\r\n");
      out.write("        \r\n");
      out.write("        \r\n");
      out.write("        // 마커와 검색결과 항목에 mouseover 했을때\r\n");
      out.write("        // 해당 장소에 인포윈도우에 장소명을 표시합니다\r\n");
      out.write("        // mouseout 했을 때는 인포윈도우를 닫습니다\r\n");
      out.write("        (function(marker, title) {\r\n");
      out.write("               \r\n");
      out.write("            daum.maps.event.addListener(marker, 'click', function(){\r\n");
      out.write("            \t///////////////여기에 주소입력창에 자동으로 주소 삽입 추가\r\n");
      out.write("            \tvar titleDiv = document.getElementById('store_name');//매장 이름 입력input\r\n");
      out.write("            \ttitleDiv.value = title;\r\n");
      out.write("            \t\r\n");
      out.write("            \tvar addressDiv = document.getElementById('store_address');//매장 주소 입력input\r\n");
      out.write("            \tvar telDiv = document.getElementById('store_phone'); //매장 전화번호 입력input\r\n");
      out.write("            \t\r\n");
      out.write("       \r\n");
      out.write("            \t\r\n");
      out.write("            \tfor(var i=0; i<places.length; i++){  //places배열에서 클릭한 마크의 title과 같은 정보의 주소와 전화번호를 뽑아내기 위해\r\n");
      out.write("            \t\tif(places[i].place_name === title){\r\n");
      out.write("            \t\t\taddressDiv.value = places[i].address_name;\r\n");
      out.write("            \t\t\ttelDiv.value = places[i].phone;\r\n");
      out.write("            \t\t\t$(\"#latitude\").val(places[i].y); //위도 저장\r\n");
      out.write("            \t\t\t$(\"#longitude\").val(places[i].x); //경도 저장\t\r\n");
      out.write("            \t\t\t$(\"#placesList > .item\").eq(i).css(\"background\",\"#F99A86\");//list목록\r\n");
      out.write("            \t\t\tmap.setCenter(new daum.maps.LatLng(places[i].y, places[i].x));\r\n");
      out.write("            \t\t\t\r\n");
      out.write("            \t\t\t//addressDiv.value = $(this).find(\"> div > span\").first().text();\r\n");
      out.write("            \t\t\t//telDiv.value = $(this).find(\" .tel\").text();\r\n");
      out.write("\t\t\t\t\t\t\r\n");
      out.write("            \t\t\tif(placelistclicked !== -1){ //초기값일땐 클릭을 안했으니\r\n");
      out.write("\t\t\t\t\t\t\tinfowindow[placelistclicked].setMap(null);\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("            \t\t\t\r\n");
      out.write("\t\t\t\t\t\tplacelistclicked = i;  //클릭했을때 인덱스 저장\r\n");
      out.write("            \t\t}\r\n");
      out.write("            \t\telse{\r\n");
      out.write("            \t\t\t$(\"#placesList > .item\").eq(i).css(\"background\",\"none\");\r\n");
      out.write("            \t\t\t          \t\t\t\r\n");
      out.write("            \t\t}         \r\n");
      out.write("            \t\t\r\n");
      out.write("            \t}  \r\n");
      out.write("            });  \r\n");
      out.write("            //.find(\" div.info\")\r\n");
      out.write("            daum.maps.event.addListener(marker, 'mouseover', function(){\r\n");
      out.write("            \t\r\n");
      out.write("            \tfor(var i=0; i<places.length; i++){\r\n");
      out.write("\t            \tif(places[i].place_name === title && placelistclicked !== i){\r\n");
      out.write("\t        \t\t\t$(\"#placesList > .item\").eq(i).css(\"background\",\"#FBE2E2\");//list목록\t\r\n");
      out.write("\t        \t\t\tdisplayInfowindow(marker,title, i);\r\n");
      out.write("\t        \t\t}\t\r\n");
      out.write("            \t}\r\n");
      out.write("            }); \r\n");
      out.write("\r\n");
      out.write("            daum.maps.event.addListener(marker, 'mouseout', function() {\r\n");
      out.write("            \t\r\n");
      out.write("                for(var i=0; i<places.length; i++){\r\n");
      out.write("\t                if(places[i].place_name === title && placelistclicked !== i){\r\n");
      out.write("\t        \t\t\t$(\"#placesList > .item\").eq(i).css(\"background\",\"none\");//list목록\r\n");
      out.write("\t        \t\t\tinfowindow[i].setMap(null);\r\n");
      out.write("\t \t\t\r\n");
      out.write("\t        \t\t}\r\n");
      out.write("                }\r\n");
      out.write("            });\r\n");
      out.write("            \r\n");
      out.write("            itemEl.onmousedown = function () {\r\n");
      out.write("    \t        daum.maps.event.trigger(marker, \"click\"); //강제로 클릭 발생\t       \r\n");
      out.write("            };\r\n");
      out.write("\r\n");
      out.write("            itemEl.onmouseover =  function () {                 \t\r\n");
      out.write("            \tdaum.maps.event.trigger(marker, \"mouseover\");  //강제로 마우스 오버 발생               \r\n");
      out.write("            };\r\n");
      out.write("            \r\n");
      out.write("            itemEl.onmouseout =  function () { \t\r\n");
      out.write("            \tdaum.maps.event.trigger(marker, \"mouseout\");  //강제로 마우스 아웃 발생    \r\n");
      out.write("            };\r\n");
      out.write("            \r\n");
      out.write("        })(marker, places[i].place_name);\r\n");
      out.write("\r\n");
      out.write("        fragment.appendChild(itemEl);\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    // 검색결과 항목들을 검색결과 목록 Elemnet에 추가합니다\r\n");
      out.write("    listEl.appendChild(fragment);\r\n");
      out.write("    menuEl.scrollTop = 0;\r\n");
      out.write("\r\n");
      out.write("    // 검색된 장소 위치를 기준으로 지도 범위를 재설정합니다\r\n");
      out.write("    map.setBounds(bounds);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 검색결과 항목을 Element로 반환하는 함수입니다\r\n");
      out.write("function getListItem(index, places) {\r\n");
      out.write("\r\n");
      out.write("    var el = document.createElement('li'),\r\n");
      out.write("    itemStr = '<span class=\"markerbg marker_' + (index+1) + '\"></span>' +\r\n");
      out.write("                '<div class=\"info\">' +\r\n");
      out.write("                '   <h5>' + places.place_name + '</h5>';\r\n");
      out.write("\r\n");
      out.write("    if (places.road_address_name) {\r\n");
      out.write("        itemStr += '    <span>' + places.road_address_name + '</span>' +\r\n");
      out.write("                    '   <span class=\"jibun gray\">' +  places.address_name  + '</span>';\r\n");
      out.write("    } else {\r\n");
      out.write("        itemStr += '    <span>' +  places.address_name  + '</span>'; \r\n");
      out.write("    }\r\n");
      out.write("                 \r\n");
      out.write("      itemStr += '  <span class=\"tel\">' + places.phone  + '</span>' +\r\n");
      out.write("                '</div>';           \r\n");
      out.write("\r\n");
      out.write("    el.innerHTML = itemStr;\r\n");
      out.write("    el.className = 'item';\r\n");
      out.write("\r\n");
      out.write("    return el;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("var selectedMarker = null; //클릭한 마커를 담을 변수\r\n");
      out.write("var MARKER_WIDTH = 33, // 기본, 클릭 마커의 너비\r\n");
      out.write("\tMARKER_HEIGHT = 36, // 기본, 클릭 마커의 높이\r\n");
      out.write("\tOFFSET_X = 12, // 기본, 클릭 마커의 기준 X좌표\r\n");
      out.write("\tOFFSET_Y = MARKER_HEIGHT, // 기본, 클릭 마커의 기준 Y좌표\r\n");
      out.write("\tOVER_MARKER_WIDTH = 45, // 오버 마커의 너비\r\n");
      out.write("\tOVER_MARKER_HEIGHT = 42, // 오버 마커의 높이\r\n");
      out.write("\tOVER_OFFSET_X = 16, // 오버 마커의 기준 X좌표\r\n");
      out.write("\tOVER_OFFSET_Y = OVER_MARKER_HEIGHT, // 오버 마커의 기준 Y좌표\r\n");
      out.write("\tSPRITE_MARKER_URL = 'http://t1.daumcdn.net/localimg/localimages/07/2012/img/marker_normal.png', // 스프라이트 마커 이미지 URL\r\n");
      out.write("\tSPRITE_WIDTH = 644, // 스프라이트 이미지 너비\r\n");
      out.write("\tSPRITE_HEIGHT = 946, // 스프라이트 이미지 높이\r\n");
      out.write("\tSPRITE_GAP = 10; // 스프라이트 이미지에서 마커간 간격\r\n");
      out.write("var markerSize = new daum.maps.Size(MARKER_WIDTH, MARKER_HEIGHT), // 기본, 클릭 마커의 크기\r\n");
      out.write("\tmarkerOffset = new daum.maps.Point(OFFSET_X, OFFSET_Y), // 기본, 클릭 마커의 기준좌표\r\n");
      out.write("\toverMarkerSize = new daum.maps.Size(50, 50), // 오버 마커의 크기\r\n");
      out.write("\toverMarkerOffset = new daum.maps.Point(OVER_OFFSET_X, 48), // 오버 마커의 기준 좌표\r\n");
      out.write("\tspriteImageSize = new daum.maps.Size(SPRITE_WIDTH, SPRITE_HEIGHT); // 스프라이트 이미지의 크기\r\n");
      out.write("// 마커를 생성하고 지도 위에 마커를 표시하는 함수입니다\r\n");
      out.write("function addMarker(position, i) {\r\n");
      out.write("\tvar gapX = (MARKER_WIDTH + SPRITE_GAP), // 스프라이트 이미지에서 마커로 사용할 이미지 X좌표 간격 값\r\n");
      out.write("    originY = (46 * i) + SPRITE_GAP, // 스프라이트 이미지에서 기본, 클릭 마커로 사용할 Y좌표 값\r\n");
      out.write("    overOriginY = (OVER_MARKER_HEIGHT + SPRITE_GAP) * i, // 스프라이트 이미지에서 오버 마커로 사용할 Y좌표 값\r\n");
      out.write("    normalOrigin = new daum.maps.Point(53, originY-2), // 스프라이트 이미지에서 기본 마커로 사용할 영역의 좌상단 좌표\r\n");
      out.write("    clickOrigin = new daum.maps.Point(138, originY-2), // 스프라이트 이미지에서 마우스오버 마커로 사용할 영역의 좌상단 좌표\r\n");
      out.write("    overOrigin = new daum.maps.Point(316, overOriginY); // 스프라이트 이미지에서 클릭 마커로 사용할 영역의 좌상단 좌표\r\n");
      out.write("    \r\n");
      out.write("    // 기본 마커이미지, 오버 마커이미지, 클릭 마커이미지를 생성합니다\r\n");
      out.write("    var normalImage = createMarkerImage(markerSize, markerOffset, normalOrigin),\r\n");
      out.write("        overImage = createMarkerImage(overMarkerSize, overMarkerOffset, overOrigin),\r\n");
      out.write("        clickImage = createMarkerImage(markerSize, markerOffset, clickOrigin);\r\n");
      out.write("    \r\n");
      out.write("    // 마커를 생성하고 이미지는 기본 마커 이미지를 사용합니다\r\n");
      out.write("    var marker = new daum.maps.Marker({\r\n");
      out.write("        position: position,\r\n");
      out.write("        image: normalImage\r\n");
      out.write("    });\r\n");
      out.write("    \r\n");
      out.write("\r\n");
      out.write("    \r\n");
      out.write("\t// 마커 객체에 마커아이디와 마커의 기본 이미지를 추가합니다\r\n");
      out.write("    marker.normalImage = normalImage;\r\n");
      out.write("\r\n");
      out.write("    // 마커에 mouseover 이벤트를 등록합니다\r\n");
      out.write("    daum.maps.event.addListener(marker, 'mouseover', function() {\r\n");
      out.write("\r\n");
      out.write("        // 클릭된 마커가 없고, mouseover된 마커가 클릭된 마커가 아니면\r\n");
      out.write("        // 마커의 이미지를 오버 이미지로 변경합니다\r\n");
      out.write("        if (!selectedMarker || selectedMarker !== marker) {\r\n");
      out.write("            marker.setImage(overImage);\r\n");
      out.write("        }\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    // 마커에 mouseout 이벤트를 등록합니다\r\n");
      out.write("    daum.maps.event.addListener(marker, 'mouseout', function() {\r\n");
      out.write("\r\n");
      out.write("        // 클릭된 마커가 없고, mouseout된 마커가 클릭된 마커가 아니면\r\n");
      out.write("        // 마커의 이미지를 기본 이미지로 변경합니다\r\n");
      out.write("        if (!selectedMarker || selectedMarker !== marker) {\r\n");
      out.write("            marker.setImage(normalImage);\r\n");
      out.write("        }\r\n");
      out.write("    }); \r\n");
      out.write("\r\n");
      out.write("    // 마커에 click 이벤트를 등록합니다\r\n");
      out.write("    daum.maps.event.addListener(marker, 'click', function() {\r\n");
      out.write("\r\n");
      out.write("        // 클릭된 마커가 없고, click 마커가 클릭된 마커가 아니면\r\n");
      out.write("        // 마커의 이미지를 클릭 이미지로 변경합니다\r\n");
      out.write("        if (!selectedMarker || selectedMarker !== marker) {\r\n");
      out.write("\r\n");
      out.write("            // 클릭된 마커 객체가 null이 아니면\r\n");
      out.write("            // 클릭된 마커의 이미지를 기본 이미지로 변경하고\r\n");
      out.write("            !!selectedMarker && selectedMarker.setImage(selectedMarker.normalImage);\r\n");
      out.write("\r\n");
      out.write("            // 현재 클릭된 마커의 이미지는 클릭 이미지로 변경합니다\r\n");
      out.write("            marker.setImage(clickImage);\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        // 클릭된 마커를 현재 클릭된 마커 객체로 설정합니다\r\n");
      out.write("        selectedMarker = marker;\r\n");
      out.write("    });\r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("\r\n");
      out.write("    marker.setMap(map);\t   // 지도 위에 마커를 표출합니다\r\n");
      out.write("    markers.push(marker);  // 배열에 생성된 마커를 추가합니다\r\n");
      out.write("    \r\n");
      out.write("    return marker;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("//MakrerImage 객체를 생성하여 반환하는 함수입니다\r\n");
      out.write("function createMarkerImage(markerSize, offset, spriteOrigin) {\r\n");
      out.write("    var markerImage = new daum.maps.MarkerImage(\r\n");
      out.write("        SPRITE_MARKER_URL, // 스프라이트 마커 이미지 URL\r\n");
      out.write("        markerSize, // 마커의 크기\r\n");
      out.write("        {\r\n");
      out.write("            offset: offset, // 마커 이미지에서의 기준 좌표\r\n");
      out.write("            spriteOrigin: spriteOrigin, // 스트라이프 이미지 중 사용할 영역의 좌상단 좌표\r\n");
      out.write("            spriteSize: spriteImageSize // 스프라이트 이미지의 크기\r\n");
      out.write("        }\r\n");
      out.write("    );\r\n");
      out.write("    \r\n");
      out.write("    return markerImage;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 지도 위에 표시되고 있는 마커를 모두 제거합니다\r\n");
      out.write("function removeMarker() {\r\n");
      out.write("    for ( var i = 0; i < markers.length; i++ ) {\r\n");
      out.write("        markers[i].setMap(null);\r\n");
      out.write("    }   \r\n");
      out.write("    markers = [];\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 검색결과 목록 하단에 페이지번호를 표시는 함수입니다\r\n");
      out.write("function displayPagination(pagination) {\r\n");
      out.write("    var paginationEl = document.getElementById('pagination'),\r\n");
      out.write("        fragment = document.createDocumentFragment(),\r\n");
      out.write("        i; \r\n");
      out.write("\t\r\n");
      out.write("    // 기존에 추가된 페이지번호를 삭제합니다\r\n");
      out.write("    while (paginationEl.hasChildNodes()) {\r\n");
      out.write("        paginationEl.removeChild (paginationEl.lastChild);\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    for (i=1; i<=pagination.last; i++) {\r\n");
      out.write("        var el = document.createElement('a');\r\n");
      out.write("        el.href = \"#\";\r\n");
      out.write("        el.innerHTML = i;\r\n");
      out.write("\r\n");
      out.write("        if (i===pagination.current) {\r\n");
      out.write("            el.className = 'on';\r\n");
      out.write("        } else {\r\n");
      out.write("            el.onclick = (function(i) {\r\n");
      out.write("                return function() {\r\n");
      out.write("                    pagination.gotoPage(i);\r\n");
      out.write("                }\r\n");
      out.write("            })(i);\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        fragment.appendChild(el);\r\n");
      out.write("    }\r\n");
      out.write("    paginationEl.appendChild(fragment);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/*<div class=\"title\"><div class=\"body\"><div class=\"desc\"></div></div></div>*/\r\n");
      out.write("function displayInfowindow(marker, title, index) {   //윈도우인포(커스텀 오버레이) 꾸미기\r\n");
      out.write("    var content = '<div class=\"wrap\"><div  class=\"infowin\"><div class=\"desc\" style=\"color:white\">' + title + '</div></div></div>';\r\n");
      out.write("\t\r\n");
      out.write("    //인포윈도우를 담는 배열 선언\r\n");
      out.write("    infowin = new daum.maps.CustomOverlay({\r\n");
      out.write("\t\tcontent: content,\r\n");
      out.write("\t\tmap: map,\r\n");
      out.write("\t\tposition: marker.getPosition()\r\n");
      out.write("\t});\r\n");
      out.write("    //infowin.setContent(content);   \r\n");
      out.write("    //infowin.open(map, marker);\r\n");
      out.write("    //infowin.setMap(map);\r\n");
      out.write(" \tinfowindow[index] = infowin;\r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("}\r\n");
      out.write(" // 검색결과 목록의 자식 Element를 제거하는 함수입니다\r\n");
      out.write("function removeAllChildNods(el) {   \r\n");
      out.write("    while (el.hasChildNodes()) {\r\n");
      out.write("        el.removeChild (el.lastChild);\r\n");
      out.write("    }\r\n");
      out.write("}\r\n");
      out.write(" \r\n");
      out.write("function addClickMarker(position, i) {\r\n");
      out.write("\t\r\n");
      out.write("\tvar imageSrc =\"/mimi/resources/images/icon/if_map-marker.png\",\r\n");
      out.write("\t\timageSize = new daum.maps.Size(48, 48), //마커 이미지 크기\r\n");
      out.write("\t\timageOption = {offset:new daum.maps.Point(25, 45)}; //마커이미지의 옵션. 이미지 안에서의 좌표\r\n");
      out.write("    \r\n");
      out.write("\tvar markerImage = new daum.maps.MarkerImage(imageSrc, imageSize, imageOption),\r\n");
      out.write("\t\tmarkerPosition = position; //마커 표시 위치\r\n");
      out.write("\t\r\n");
      out.write("\t//마커 생성\r\n");
      out.write("\tvar marker = new daum.maps.Marker({\r\n");
      out.write("\t\tposition:markerPosition,\r\n");
      out.write("\t\timage: markerImage // 마커 이미지 설정\r\n");
      out.write("\t});\r\n");
      out.write("\t\r\n");
      out.write("    marker.setMap(map);\t   // 지도 위에 마커를 표출합니다\r\n");
      out.write("    markers.push(marker);  // 배열에 생성된 마커를 추가합니다\r\n");
      out.write("    \r\n");
      out.write("    return marker;\r\n");
      out.write("} \r\n");
      out.write("\r\n");
      out.write("//직접 표시하기 버튼 눌렀을때\r\n");
      out.write("$(\"#direct\").click(function(){\r\n");
      out.write("\tmap.setCursor(\"crosshair\"); //위치 표시하기 버튼 누를씨 cursor 모양 변경\r\n");
      out.write("\tcount = 0;\r\n");
      out.write("\tdaum.maps.event.addListener(map, 'click', function(mouseEvent) {\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tif(count === 0){ //직접 마커표시 버튼 클릭 시\t\t\t\r\n");
      out.write("\t\t\t//리스트에 표시된 목록을 전부 제거합니다.\r\n");
      out.write("\t\t\tremoveAllChildNods(document.getElementById('placesList'));\r\n");
      out.write("\t\t    // 지도에 표시되고 있는 마커를 제거합니다\r\n");
      out.write("\t\t    removeMarker();\r\n");
      out.write("\t\t    // 리스트에 페이지네이션 표시가 있을시 전부 삭제합니다.\r\n");
      out.write("\t\t    while (document.getElementById('pagination').hasChildNodes()){\r\n");
      out.write("\t\t    \tdocument.getElementById('pagination').removeChild(document.getElementById('pagination').lastChild);\r\n");
      out.write("\t\t    }\r\n");
      out.write("\t\t    //지도에 표시되있는 윈도우인포 닫기\r\n");
      out.write("\t\t    for(var i=0; i<infowindow.length; i++){\r\n");
      out.write("\t\t    \tif(infowindow[i] !== undefined){  //이미 지워진 인덱스의 값을 또 close()할경우 undefinded 발생 (안닫힌 info창만 제거)\r\n");
      out.write("\t\t    \t\tinfowindow[i].setMap(null);\r\n");
      out.write("\t\t    \t} \r\n");
      out.write("\t\t    }\r\n");
      out.write("\t\t    \r\n");
      out.write("\t\t    //인풋창 초기화\r\n");
      out.write("\t\t    $(\"#keyword\").val(\"\");\t\t//검색창 input 초기화\r\n");
      out.write("\t\t\t$(\"#store_address\").val(\"\");//기존 매장 주소 입력input 초기화\r\n");
      out.write("\t\t\t$(\"#store_name\").val(\"\");\t//기존 매장 이름 입력input 초기화\r\n");
      out.write("\t\t\t$(\"#store_phone\").val(\"\"); //기존 매장 전화번호 입력 input 초기화 \r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tmap.setCursor(\"\"); //위치 클릭시 기존 커서로 돌아옴\r\n");
      out.write("\t        // 마커를 클릭한 위치에 표시합니다   \t\r\n");
      out.write("\t        addClickMarker(mouseEvent.latLng, 0);\t       \t\r\n");
      out.write("\t        //////////////// 이제 찍은 위도 경도를 저장 시킬 공간 필요//////////////////////////////\r\n");
      out.write("\t        map.setCenter(new daum.maps.LatLng(mouseEvent.latLng.jb, mouseEvent.latLng.ib)); //클릭시 중심좌표\r\n");
      out.write("\t        \r\n");
      out.write("\t        $(\"#latitude\").val(mouseEvent.latLng.jb); //위도 저장\r\n");
      out.write("\t        $(\"#longitude\").val(mouseEvent.latLng.ib); //경도 저장\r\n");
      out.write("\t        //markers.push(marker); ////markers배열에 추가해야 removeMaker()호출 시 삭제됨\r\n");
      out.write("\r\n");
      out.write("\t        count = count+1;  // 마커 표시 후 if문 제어\r\n");
      out.write("\t        \r\n");
      out.write("\t        //지정한 좌표로 주소를 검색해서 inputbox에 표시\r\n");
      out.write("\t        searchAddrFromCoords(mouseEvent.latLng, displayCenterInfo);\t        \r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\t\r\n");
      out.write("}); \t\r\n");
      out.write("</script>\t\r\n");
      out.write('\r');
      out.write('\n');
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t\r\n");
      out.write("\t<script type=\"text/javascript\" src=\"/mimi/resources/js/bootstrap.js\"></script>\r\n");
      out.write("\t<script type=\"text/javascript\" src=\"/mimi/resources/js/kakao.min.js\"></script>\r\n");
      out.write("\t<script src=\"https://cdn.jsdelivr.net/clipboard.js/1.5.3/clipboard.min.js\"></script>\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("</body>\r\n");
      out.write("<!-- 바디 태그 끝 -->\r\n");
      out.write("</html>\t");
      out.write(' ');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
